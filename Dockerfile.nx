# Use the Node.js Alpine image as the base image
FROM node:alpine

# Install necessary system dependencies for Python
RUN apk update && \
    apk add --no-cache python3 && \
    ln -sf python3 /usr/bin/python && \
    apk add --no-cache --virtual .build-deps \
    build-base \
    python3-dev \
    py3-pip \
    libc-dev \
    libffi-dev \
    openssl-dev \
    cargo \
    # Add necessary system dependencies for canvas
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    libpng-dev \
    libwebp-dev

# Create and set the working directory
RUN mkdir -p /server
WORKDIR /server

# Copy source files into the working directory
COPY . /server

# Install global Nx CLI
RUN npm i -g nx

# Set higher memory limit for Node.js
ENV NODE_OPTIONS="--max_old_space_size=8192"

# Install dependencies again (if necessary)
RUN npm install --legacy-peer-deps

# Run npm install --force
RUN npm install --force

# This line enables distribution
# The "--stop-agents-after" is optional, but allows idle agents to shut down once the "e2e-ci" targets have been requested
RUN npx nx-cloud start-ci-run --distribute-on="5 linux-medium-js" --stop-agents-after="e2e-ci"

# Use nrwl/nx-set-shas action
RUN npx nx-set-shas@v4.0.4

# Create dynamic branch
RUN branch_name="develop-$(date +%Y-%m-%d-%H-%M-%S)" && git branch --track $branch_name origin/develop

# Run nx affected command
RUN npx nx affected -t build authoring-web --base=main --head=HEAD --parallel=10

# Set higher memory limit for Node.js
# ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NODE_OPTIONS="--max_old_space_size=8192"

# Build the authoring-web project in parallel
RUN nx build authoring-web --parallel=10

# Expose port 3000
EXPOSE 3000

# Command to start the app
CMD npm run deploy:authoring
