name: platformx-workflow-with-nx
on:
  push:
    branches:
      - develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  authoring-ui:
    name: authoring-ui
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-16core-64GB
    timeout-minutes: 60
    steps:
      - name: Generate Unique ID
        id: generate_id
        run: echo "NX_CI_EXECUTION_ID=$(date +%Y%m%d%H%M%S)-${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Set env vars (develop)
        if: endsWith(github.ref, '/develop')
        run: |
          echo "NX_BRANCH=echo ${{ github.event.number }}"
          echo "NX_RUN_GROUP=echo ${{ github.run_id }}"
          echo "NX_CI_EXECUTION_ID=${{ steps.generate_id.outputs.NX_CI_EXECUTION_ID }}"
          echo "CLUSTER_NAME=GKE_CLUSTER_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "IMAGE_NAME=IMAGE_NAME_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "PROJECT_ID=PROJECT_ID_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "GKE_ZONE=GKE_ZONE_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "DEPLOYMENT_NAME=DEPLOYMENT_NAME_AUTH_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "NAMESPACE_NAME=NAMESPACE_NAME_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "WORKLOAD_IDENTITY_PROVIDER=WORKLOAD_IDENTITY_PROVIDER_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT=SERVICE_ACCOUNT_DEVELOP_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      # Install Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          # cache: 'npm'

      # Install dependencies
      - name: Install Dependencies
        run: npm i --legacy-peer-deps

      # Setup Nx Cloud
      # - name: Setup Nx Cloud
      #   uses: nrwl/nx-set-shas@v3
      # Setup Nx Cloud
      - name: Setup Nx Cloud
        run: npx nx connect --organization=hcl-x --token ${{ secrets.NX_CLOUD_TOKEN }}

      # Record Nx Cloud actions and execute Nx commands
      # - name: Record Nx Cloud Actions and Execute Nx Commands
      #   run: npx nx-cloud record -- npx nx affected --target=lint,test,build

      # Setup gcloud CLI For Dev_QA
      - name: develop-cluster-auth
        if: endsWith(github.ref, '/develop')
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets[env.WORKLOAD_IDENTITY_PROVIDER] }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_DEVELOP }}
          token_format: "access_token"

      # Get the GKE credentials so we can deploy to the cluster
      - name: gke-credentails-dev
        if: contains('
          refs/heads/kiwi_dev
          refs/heads/marvels_dev
          refs/heads/mavericks_dev
          refs/heads/develop', github.ref)
        uses: google-github-actions/get-gke-credentials@v0.4.0
        with:
          cluster_name: ${{ secrets[env.CLUSTER_NAME] }}
          location: ${{ secrets[env.GKE_ZONE] }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build -f Dockerfile.author --tag "gcr.io/${{ secrets[env.PROJECT_ID] }}/${{ secrets[env.IMAGE_NAME] }}:$GITHUB_RUN_NUMBER"  .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          gcloud auth configure-docker --quiet
          docker push "gcr.io/${{ secrets[env.PROJECT_ID] }}/${{ secrets[env.IMAGE_NAME] }}:$GITHUB_RUN_NUMBER"

      # Deploy Configmap
      - name: Deploy Configmap on develop branch
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |-
          kubectl apply -f ./kubernetes/configmaps/hep-authoring-ui-config-develop.yaml

      - name: deploy-stg-live
        if: contains('
          refs/heads/x_site_live
          refs/heads/develop
          refs/heads/kiwi_dev
          refs/heads/marvels_dev
          refs/heads/mavericks_dev
          refs/heads/qa
          refs/heads/stg', github.ref)
        run: |-
          cd authoring
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/${{ secrets[env.PROJECT_ID] }}/${{ secrets[env.IMAGE_NAME] }}:$GITHUB_RUN_NUMBER
          ./kustomize build . | kubectl apply -f - -n ${{ secrets[env.NAMESPACE_NAME] }}
          kubectl rollout status deployment ${{ secrets[env.DEPLOYMENT_NAME] }} -n ${{ secrets[env.NAMESPACE_NAME] }} --timeout=180s

  user-experience-ui:
    name: user-experience-ui
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-16core-64GB
    timeout-minutes: 60
    steps:
      - name: Set env vars (develop)
        if: endsWith(github.ref, '/develop')
        run: |
          echo "CLUSTER_NAME=GKE_CLUSTER_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "IMAGE_NAME=IMAGE_NAME_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "PROJECT_ID=PROJECT_ID_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "GKE_ZONE=GKE_ZONE_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "DEPLOYMENT_NAME=DEPLOYMENT_NAME_UX_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "NAMESPACE_NAME=NAMESPACE_NAME_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "WORKLOAD_IDENTITY_PROVIDER=WORKLOAD_IDENTITY_PROVIDER_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT=SERVICE_ACCOUNT_DEVELOP_$(echo ${{ github.ref_name }} | tr  '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      # Install Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          #cache: "npm"

      # Install dependencies
      - name: Install Dependencies
        run: npm i --legacy-peer-deps

      # Setup Nx Cloud
      # - name: Setup Nx Cloud
      #   uses: nrwl/nx-set-shas@v3
      # Setup Nx Cloud
      - name: Setup Nx Cloud
        run: npx nx connect --organization=hcl-x --token ${{ secrets.NX_CLOUD_TOKEN }}

      # Record Nx Cloud actions and execute Nx commands
      # - name: Record Nx Cloud Actions and Execute Nx Commands
      #   run: npx nx-cloud record -- npx nx affected --target=lint,test,build

      # Setup gcloud CLI For Dev_QA
      - name: develop-cluster-auth
        if: endsWith(github.ref, '/develop')
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets[env.WORKLOAD_IDENTITY_PROVIDER] }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_DEVELOP }}
          token_format: "access_token"

      # Get the GKE credentials so we can deploy to the cluster
      - name: gke-credentails-dev
        if: contains('
          refs/heads/kiwi_dev
          refs/heads/marvels_dev
          refs/heads/mavericks_dev
          refs/heads/develop', github.ref)
        uses: google-github-actions/get-gke-credentials@v0.4.0
        with:
          cluster_name: ${{ secrets[env.CLUSTER_NAME] }}
          location: ${{ secrets[env.GKE_ZONE] }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build -f Dockerfile.userexp --tag "gcr.io/${{ secrets[env.PROJECT_ID] }}/${{ secrets[env.IMAGE_NAME] }}:$GITHUB_RUN_NUMBER"  .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          gcloud auth configure-docker --quiet
          docker push "gcr.io/${{ secrets[env.PROJECT_ID] }}/${{ secrets[env.IMAGE_NAME] }}:$GITHUB_RUN_NUMBER"

      # Deploy Configmap
      - name: Deploy Configmap on develop branch
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |-
          kubectl apply -f ./kubernetes/configmaps/hep-user-experience-ui-config-develop.yaml

      - name: deploy-stg-live
        if: contains('
          refs/heads/x_site_live
          refs/heads/develop
          refs/heads/kiwi_dev
          refs/heads/marvels_dev
          refs/heads/mavericks_dev
          refs/heads/qa
          refs/heads/stg', github.ref)
        run: |-
          cd userexp
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/${{ secrets[env.PROJECT_ID] }}/${{ secrets[env.IMAGE_NAME] }}:$GITHUB_RUN_NUMBER
          ./kustomize build . | kubectl apply -f - -n ${{ secrets[env.NAMESPACE_NAME] }}
          kubectl rollout status deployment ${{ secrets[env.DEPLOYMENT_NAME] }}  -n ${{ secrets[env.NAMESPACE_NAME] }} --timeout=180s
